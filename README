******************************************************************************
* Comp 15 Project 2: Grep
* README
* Author: Viet Nguyen
*
******************************************************************************

***************
COMPILE / RUN *
***************

Compile using "make," run using executable 
	./gerp input_directory output_directory

Compile testGerp using "make testGerp", run using executable ./testGerp
(This will not run as expected when you test it on server (explanation below))

*****************
ACKNOWLEDGEMENT *
*****************

I mostly developed ideas and structures on my own, and discussed ways to improve
run time and functionality with Robert Nooney (another student in Comp15). Beside,
in office hours, Armanc suggested that to make query almost instant, instead of 
openning a specific file and get to the designated line, I can just store all 
lines a data structure of my choice (preferably arrays or vectors), then just
access the line in given index whenever necessary. 

*******
FILES *
*******

FSTree.h		: interface of FSTree class  (used to explore file directories)
FSTree.o		: compiled version of FSTree.cpp
DirNode.h 		: interface of DirNode class (nodes used in FSTree)
DirNode.o 		: compiled version of DirNode.cpp
hashExample.cpp : an example on how to use the hash function (and compression) with STL library
the_gerp		: compiled solution of this assignment (good for comparing purposes)
README 			: this file
Entry.h         : small structs that is part HashTable class
HashTable.h     : interface of HashTable class
HashTable.cpp   : implementation of HashTable class
unittests       : a folder that has 2 files and a subdirecty that has 2 more files
main.cpp        : driver for gerp
input1.txt      : input file for unit test
testGerp.txt    : unit test driver

Files from Phase 1: 
StringProcessing.cpp : Test the remove special characters function 
FSTreeTraversal.cpp  : Test the tree traversing functionality 

*****************
DATA STRUCTURES *
*****************

My general data structure is an Entry struct that has the following components
 - A "key" string 
 - A vector of Words (variants of the "key")
               | An "origianl" string
               | A vector of Locations
                             | A size_t variable as index in directories vector
                             | A size_t variable as index in lines vector
                             | An integer to mark which line of the file

My hash_table is a dynamic array of vectors of Entry structs. Words are input
 strings by strings and all the words are removed of special character and 
 toLower before hashed for indices. 
 After the specific Entry is accessed, we will input the word in a Word struct
 object with the pre-toLower string as "original"

There are 2 cases of collision:  
- Deliberate collision: A key string and its variants, I put in the same Entry
 Example: "Data", "DATA", "DATa", "Data" are in the same Entry
- Unintentional collision:  Due to the modulo fucntion I used after hasing 
a string, there are unintentional collisions when 2 Entries are in the same 
bucket. To solve this, each member of my hash_table array is a vector, so 
whenever colision occured, I will just push the new Entry to the back of that
vector. 

Initial size of my hash_table is 16061 (which is a prime), and my coefficient
of expansion is 5/2. After each new Entry is added, I will increase word_count 
by 1. Only when an entry's inserted in the hash table will increase word_count.
In other word, word_count will still be 1 if I insert "dynamic" then "Dynamic."
The reason is that I just want the time to find required Entry to be constant or
approximately constant. Otherwise, reindexing will be too excessive.
                
***********
UNITTESTS *
***********

****[Tests that can be used from phase 1 (based on user interactive input)]****

1) Test my remove special characters. There are 2 edge cases to be attended: 
 - The string is full of special character -> an empty string must be returned
(which means that no segmentation fault in this case)
 - The string is has special characters between valid characters -> those must
be preserved 
 --> Tested input: "#####", "COmp!!15", "!!!!comp15!!!"

2) Test the function behavior of FSTree parametrized constructor 
 Normally, to open a directory, user will end the last subdirectory without a "/"
--> Test if the a directory tree is still created without throwing errors when
"comp15/proj2/unittests/" is input instead of "comp15/proj2/unittests"
--> Also tests with normal directories 

*****************[Tests for functionality of HashTable classs]*****************

This class contains all functions that is required for gerp drivers. 
There are only 3 public functions: constructors (default and parametrized),
query_insensitive, and query_sensitive.

*****************************************
For query_insensitive and query_sensitive
*****************************************

There are 3 edge cases to be tested. 
1st: The queried string doesn't appear in the hash table
2nd: The queried string appears twice on the same row 
 For example: "An array is an array blah blah." If we query "array", the line
 should only printed out once but not twice. 
3rd: The queried string has special characters in the end. 
 For example" "I want to die." If we query "die", this line should be printed
even when "die." has a period after the word we query. 

Those 3 cases are demonstrated in the testGerp.cpp.

I also include the input1.txt file for testing purpose, but when you try to 
run the executable, a directory error will be called. The reason is that I 
had to put my input text file into a subdirectory (otherwise it will try to
index all files in my project 2 folder), and FStree doesn't accept path to a
file, instead of directory. 

To solve this, I comment my test input inside the testGerp.cpp. I still include
a functional make command for testGerp, and the executable still runs, but a 
"directory not found" error will appear.

******************************
Opening files and subdirectory
******************************

Regarding openning files and directory, I tested it with my unittests folder
with an unittest subdirectory. 

